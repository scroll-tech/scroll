package codecv1

import (
	"encoding/hex"
	"encoding/json"
	"os"
	"strings"
	"testing"

	"scroll-tech/common/types/encoding"
	"scroll-tech/common/types/encoding/codecv0"

	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/stretchr/testify/assert"
)

func TestCodecV1BlockEncode(t *testing.T) {
	block := &DABlock{}
	encoded := hex.EncodeToString(block.Encode())
	assert.Equal(t, "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", encoded)

	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	block, err := NewDABlock(trace2, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(block.Encode())
	assert.Equal(t, "00000000000000020000000063807b2a0000000000000000000000000000000000000000000000000000000000001de9000355418d1e818400020000", encoded)

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	block, err = NewDABlock(trace3, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(block.Encode())
	assert.Equal(t, "00000000000000030000000063807b2d0000000000000000000000000000000000000000000000000000000000001a2c0003546c3cbb39e500010000", encoded)

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	block, err = NewDABlock(trace4, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(block.Encode())
	assert.Equal(t, "000000000000000d00000000646b6e13000000000000000000000000000000000000000000000000000000000000000000000000007a1200000c000b", encoded)

	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	block, err = NewDABlock(trace5, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(block.Encode())
	assert.Equal(t, "000000000000001100000000646b6ed0000000000000000000000000000000000000000000000000000000000000000000000000007a1200002a002a", encoded)

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	block, err = NewDABlock(trace6, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(block.Encode())
	assert.Equal(t, "000000000000001100000000646b6ed0000000000000000000000000000000000000000000000000000000000000000000000000007a1200000a000a", encoded)

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	block, err = NewDABlock(trace7, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(block.Encode())
	assert.Equal(t, "000000000000001100000000646b6ed0000000000000000000000000000000000000000000000000000000000000000000000000007a120001010101", encoded)

	// sanity check: v0 and v1 block encodings are identical
	for _, trace := range []*encoding.Block{trace2, trace3, trace4, trace5, trace6, trace7} {
		blockv0, err := codecv0.NewDABlock(trace, 0)
		assert.NoError(t, err)
		encodedv0 := hex.EncodeToString(blockv0.Encode())

		blockv1, err := NewDABlock(trace, 0)
		assert.NoError(t, err)
		encodedv1 := hex.EncodeToString(blockv1.Encode())

		assert.Equal(t, encodedv0, encodedv1)
	}
}

func TestCodecV1ChunkEncode(t *testing.T) {
	// chunk with a single empty block
	block := DABlock{}
	chunk := &DAChunk{Blocks: []*DABlock{&block}, Transactions: [][]*types.TransactionData{nil}}
	encoded := hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", encoded)

	// transactions are not part of the encoding
	chunk.Transactions[0] = append(chunk.Transactions[0], &types.TransactionData{Type: types.L1MessageTxType}, &types.TransactionData{Type: types.DynamicFeeTxType})
	encoded = hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", encoded)

	trace := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	originalChunk := &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err := NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "0100000000000000020000000063807b2a0000000000000000000000000000000000000000000000000000000000001de9000355418d1e818400020000", encoded)

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "0100000000000000030000000063807b2d0000000000000000000000000000000000000000000000000000000000001a2c0003546c3cbb39e500010000", encoded)

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "01000000000000000d00000000646b6e13000000000000000000000000000000000000000000000000000000000000000000000000007a1200000c000b", encoded)

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "01000000000000001100000000646b6ed0000000000000000000000000000000000000000000000000000000000000000000000000007a1200002a002a", encoded)

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "01000000000000001100000000646b6ed0000000000000000000000000000000000000000000000000000000000000000000000000007a1200000a000a", encoded)

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(chunk.Encode())
	assert.Equal(t, "01000000000000001100000000646b6ed0000000000000000000000000000000000000000000000000000000000000000000000000007a120001010101", encoded)
}

func TestCodecV1ChunkHash(t *testing.T) {
	// chunk with a single empty block
	block := DABlock{}
	chunk := &DAChunk{Blocks: []*DABlock{&block}, Transactions: [][]*types.TransactionData{nil}}
	hash, err := chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0x7cdb9d7f02ea58dfeb797ed6b4f7ea68846e4f2b0e30ed1535fc98b60c4ec809", hash.Hex())

	// L1 transactions are part of the hash
	chunk.Transactions[0] = append(chunk.Transactions[0], &types.TransactionData{Type: types.L1MessageTxType, TxHash: "0x0000000000000000000000000000000000000000000000000000000000000000"})
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0xdcb42a70c54293e75a19dd1303d167822182d78b361dd7504758c35e516871b2", hash.Hex())

	// L2 transactions are not part of the hash
	chunk.Transactions[0] = append(chunk.Transactions[0], &types.TransactionData{Type: types.DynamicFeeTxType, TxHash: "0x0000000000000000000000000000000000000000000000000000000000000000"})
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0xdcb42a70c54293e75a19dd1303d167822182d78b361dd7504758c35e516871b2", hash.Hex())

	// numL1Messages are not part of the hash
	chunk.Blocks[0].NumL1Messages = 1
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0xdcb42a70c54293e75a19dd1303d167822182d78b361dd7504758c35e516871b2", hash.Hex())

	// invalid hash
	chunk.Transactions[0] = append(chunk.Transactions[0], &types.TransactionData{Type: types.L1MessageTxType, TxHash: "0xg"})
	_, err = chunk.Hash()
	assert.Error(t, err)

	trace := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	originalChunk := &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0x820f25d806ddea0ccdbfa463ee480da5b6ea3906e8a658417fb5417d0f837f5c", hash.Hex())

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0x4620b3900e8454133448b677cbb2054c5dd61d467d7ebf752bfb12cffff90f40", hash.Hex())

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0x059c6451e83012b405c7e1a38818369012a4a1c87d7d699366eac946d0410d73", hash.Hex())

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0x854fc3136f47ce482ec85ee3325adfa16a1a1d60126e1c119eaaf0c3a9e90f8e", hash.Hex())

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0x2aa220ca7bd1368e59e8053eb3831e30854aa2ec8bd3af65cee350c1c0718ba6", hash.Hex())

	trace = readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	originalChunk = &encoding.Chunk{Blocks: []*encoding.Block{trace}}
	chunk, err = NewDAChunk(originalChunk, 0)
	assert.NoError(t, err)
	hash, err = chunk.Hash()
	assert.NoError(t, err)
	assert.Equal(t, "0xb65521bea7daff75838de07951c3c055966750fb5a270fead5e0e727c32455c3", hash.Hex())
}

func TestCodecV1BatchEncode(t *testing.T) {
	// empty batch
	batch := &DABatch{Version: CodecV1Version}
	encoded := hex.EncodeToString(batch.Encode())
	assert.Equal(t, "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", encoded)

	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	chunk2 := &encoding.Chunk{Blocks: []*encoding.Block{trace2}}
	originalBatch := &encoding.Batch{Chunks: []*encoding.Chunk{chunk2}}
	batch, err := NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "010000000000000000000000000000000000000000000000009f81f6879f121da5b7a37535cdb21b3d53099266de57b1fdf603ce32100ed54101af944924715b48be6ce3c35aef7500a50e909265599bd2b3e544ac59fc75530000000000000000000000000000000000000000000000000000000000000000", encoded)

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	chunk3 := &encoding.Chunk{Blocks: []*encoding.Block{trace3}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk3}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "01000000000000000000000000000000000000000000000000d46d19f6d48083dc7905a68e6a20ea6a8fbcd445d56b549b324a8485b5b574a6010c54fa675ed1b78f269827177019b0814a4ac4d269c68037e2c41cf08f94110000000000000000000000000000000000000000000000000000000000000000", encoded)

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	chunk4 := &encoding.Chunk{Blocks: []*encoding.Block{trace4}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk4}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "010000000000000000000000000000000b000000000000000bcaece1705bf2ce5e94154469d910ffe8d102419c5eb3152c0c6d237cf35c885f01ea66c4de196d36e2c3a5d7c0045100b9e46ef65be8f7a921ef20e6f2e99ebd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ff", encoded)

	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	chunk5 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "010000000000000000000000000000002a000000000000002a93255aa24dd468c5645f1e6901b8131a7a78a0eeb2a17cbb09ba64688a8de6b4010657f37554c781402a22917dee2f75def7ab966d7b770905398eba3c44401400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fffffffff", encoded)

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	chunk6 := &encoding.Chunk{Blocks: []*encoding.Block{trace6}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk6}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "010000000000000000000000000000000a000000000000000ac7bcc8da943dd83404e84d9ce7e894ab97ce4829df4eb51ebbbe13c90b5a3f4d010657f37554c781402a22917dee2f75def7ab966d7b770905398eba3c444014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dd", encoded)

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	chunk7 := &encoding.Chunk{Blocks: []*encoding.Block{trace7}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk7}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "01000000000000000000000000000001010000000000000101899a411a3309c6491701b7b955c7b1115ac015414bbb71b59a0ca561668d5208010657f37554c781402a22917dee2f75def7ab966d7b770905398eba3c4440140000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0000000000000000000000000000000000000000000000000000000000000000", encoded)

	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk2, chunk3, chunk4, chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "010000000000000000000000000000002a000000000000002ae7740182b0948139505b6b296d0c6c6f7717708323e6e687917acad823b559d801a1e93ead5cb8f62079b210b3e3bfad18eb38345607a68bf8024537c5ff3c7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffbff", encoded)

	chunk8 := &encoding.Chunk{Blocks: []*encoding.Block{trace2, trace3, trace4}}
	chunk9 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk8, chunk9}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = hex.EncodeToString(batch.Encode())
	assert.Equal(t, "010000000000000000000000000000002a000000000000002a9b0f37c563d27d9717ab16d47075df996c54fe110130df6b11bfd7230e13476701e4cdef25aa86f0e2dce3e1f7060b9f5f40103840ad73b5f073b2711a77003b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffbff", encoded)
}

func TestCodecV1BatchHash(t *testing.T) {
	// empty batch
	batch := &DABatch{Version: CodecV1Version}
	assert.Equal(t, "0x4b6fe410f63051f6e93532087b42ece79fb7b966e2ba5845e6cd1c091f27e564", batch.Hash().Hex())

	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	chunk2 := &encoding.Chunk{Blocks: []*encoding.Block{trace2}}
	originalBatch := &encoding.Batch{Chunks: []*encoding.Chunk{chunk2}}
	batch, err := NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xd557b02638c0385d5124f7fc188a025b33f8819b7f78c000751404997148ab8b", batch.Hash().Hex())

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	chunk3 := &encoding.Chunk{Blocks: []*encoding.Block{trace3}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk3}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xf13c7e249d00941c59fe4cd970241bbd6753eede8e043c438165674031792b3b", batch.Hash().Hex())

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	chunk4 := &encoding.Chunk{Blocks: []*encoding.Block{trace4}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk4}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xb64208f07fab641f7ebf831686d05ad667da0c7bfabcbd9c878cc22cbc8032fd", batch.Hash().Hex())

	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	chunk5 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xc5a7c95be6e1dc52c72b489be7acc36351bf36a95c64d653d26920119e070588", batch.Hash().Hex())

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	chunk6 := &encoding.Chunk{Blocks: []*encoding.Block{trace6}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk6}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0x2d524b6215d81490212c47a516070d5742c0e6afff5b550853e148193e2b7747", batch.Hash().Hex())

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	chunk7 := &encoding.Chunk{Blocks: []*encoding.Block{trace7}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk7}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0x5d6dde0bd4f428575d54df2670a812819333f7ab02a8179be40896e3747a1080", batch.Hash().Hex())

	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk2, chunk3, chunk4, chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0x1d74ccf3ece2e1da5b84863e3846aa04331f2fbf4eb4ccf30b4f4aa382bcdc02", batch.Hash().Hex())

	chunk8 := &encoding.Chunk{Blocks: []*encoding.Block{trace2, trace3, trace4}}
	chunk9 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk8, chunk9}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xfa2cde23846a0b68669623c6aeb169c8a6a7910a173111528980909ae5981774", batch.Hash().Hex())
}

func TestCodecV1BatchDataHash(t *testing.T) {
	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	chunk2 := &encoding.Chunk{Blocks: []*encoding.Block{trace2}}
	originalBatch := &encoding.Batch{Chunks: []*encoding.Chunk{chunk2}}
	batch, err := NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0x9f81f6879f121da5b7a37535cdb21b3d53099266de57b1fdf603ce32100ed541", batch.DataHash.Hex())

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	chunk3 := &encoding.Chunk{Blocks: []*encoding.Block{trace3}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk3}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xd46d19f6d48083dc7905a68e6a20ea6a8fbcd445d56b549b324a8485b5b574a6", batch.DataHash.Hex())

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	chunk4 := &encoding.Chunk{Blocks: []*encoding.Block{trace4}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk4}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xcaece1705bf2ce5e94154469d910ffe8d102419c5eb3152c0c6d237cf35c885f", batch.DataHash.Hex())

	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	chunk5 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0x93255aa24dd468c5645f1e6901b8131a7a78a0eeb2a17cbb09ba64688a8de6b4", batch.DataHash.Hex())

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	chunk6 := &encoding.Chunk{Blocks: []*encoding.Block{trace6}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk6}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xc7bcc8da943dd83404e84d9ce7e894ab97ce4829df4eb51ebbbe13c90b5a3f4d", batch.DataHash.Hex())

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	chunk7 := &encoding.Chunk{Blocks: []*encoding.Block{trace7}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk7}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0x899a411a3309c6491701b7b955c7b1115ac015414bbb71b59a0ca561668d5208", batch.DataHash.Hex())

	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk2, chunk3, chunk4, chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0xe7740182b0948139505b6b296d0c6c6f7717708323e6e687917acad823b559d8", batch.DataHash.Hex())

	chunk8 := &encoding.Chunk{Blocks: []*encoding.Block{trace2, trace3, trace4}}
	chunk9 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk8, chunk9}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0x9b0f37c563d27d9717ab16d47075df996c54fe110130df6b11bfd7230e134767", batch.DataHash.Hex())
}

func TestCodecV1BatchBlob(t *testing.T) {
	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	chunk2 := &encoding.Chunk{Blocks: []*encoding.Block{trace2}}
	originalBatch := &encoding.Batch{Chunks: []*encoding.Chunk{chunk2}}
	batch, err := NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded := strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t,
		// metadata
		"00"+"0001"+"000000e6"+"00000000"+"00000000"+"00000000"+"00000000"+"00000000"+"00000000"+"00"+"00"+"000000"+"00000000"+"00000000"+"00000000"+"00000000"+"00000000"+"00000000"+"00000000"+
			// tx payload
			"00f87180843b9aec2e8307a12094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb000ca28a152d02c7e14af60000008083019ecea0ab07ae99c67aa78e7ba5cf670081e90cc32b219b1de102513d56548a41e86df514a034cbd19feacd73e8ce6400d00c4d1996b9b5243c578fd7f51bfaec288bbaf42a8bf87101843b9aec2e830007a1209401bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e14a00f60000008083019ecea0f039985866d8256f10c1be4f7b2cace28d8f20bde2007e2604393eb095b7f77316a05a3e6e81065f2b4604bcec5bd4aba68483599600fc3f879380aac1c09c6eed32f1", encoded)
	assert.Equal(t, "0x01af944924715b48be6ce3c35aef7500a50e909265599bd2b3e544ac59fc7553", batch.BlobVersionedHash.Hex())

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	chunk3 := &encoding.Chunk{Blocks: []*encoding.Block{trace3}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk3}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t, "", encoded)
	assert.Equal(t, "0x010c54fa675ed1b78f269827177019b0814a4ac4d269c68037e2c41cf08f9411", batch.BlobVersionedHash.Hex())

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	chunk4 := &encoding.Chunk{Blocks: []*encoding.Block{trace4}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk4}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t, "0000010000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000df0b80825dc0941a258d17bf244c4df02d40343a7626a9d321e10580808080008", encoded)
	assert.Equal(t, "0x01ea66c4de196d36e2c3a5d7c0045100b9e46ef65be8f7a921ef20e6f2e99ebd", batch.BlobVersionedHash.Hex())

	// this batch only contains L1 txs
	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	chunk5 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t, "", encoded)
	assert.Equal(t, "0x010657f37554c781402a22917dee2f75def7ab966d7b770905398eba3c444014", batch.BlobVersionedHash.Hex())

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	chunk6 := &encoding.Chunk{Blocks: []*encoding.Block{trace6}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk6}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t, "", encoded)
	assert.Equal(t, "0x010657f37554c781402a22917dee2f75def7ab966d7b770905398eba3c444014", batch.BlobVersionedHash.Hex())

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	chunk7 := &encoding.Chunk{Blocks: []*encoding.Block{trace7}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk7}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t, "", encoded)
	assert.Equal(t, "0x010657f37554c781402a22917dee2f75def7ab966d7b770905398eba3c444014", batch.BlobVersionedHash.Hex())

	// 15 chunks
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t,
		// metadata
		"00"+"000f"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+"00"+"00"+"0000e6"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+"000000e6"+
			// tx payload
			"00f87180843b9aec2e8307a12094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb000ca28a152d02c7e14af60000008083019ecea0ab07ae99c67aa78e7ba5cf670081e90cc32b219b1de102513d56548a41e86df514a034cbd19feacd73e8ce6400d00c4d1996b9b5243c578fd7f51bfaec288bbaf42a8bf87101843b9aec2e830007a1209401bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e14a00f60000008083019ecea0f039985866d8256f10c1be4f7b2cace28d8f20bde2007e2604393eb095b7f77316a05a3e6e81065f2b4604bcec5bd4aba68483599600fc3f879380aac1c09c6eed32f1f87180843b9aec2e8307a12094c0c4c8baea003f6acb49b6e1fb9e2adeceeacb0ca28a152d02c7e14af60000008083019ece00a0ab07ae99c67aa78e7ba5cf6781e90cc32b219b1de102513d56548a41e86d00f514a034cbd19feacd73e8ce64d00c4d1996b9b5243c578fd7f51bfaec288b00baf42a8bf87101843b9aec2e8307a1209401bae6bf68e9a03fb2bc0615b1bf000d69ce9411ed8a152d02c7e14af60000008083019ecea0f039985866d8256f0010c1be4f7b2cace28d8f20bde27e2604393eb095b7f77316a05a3e6e81065f002b4604bcec5bd4aba684835996fc3f879380aac1c09c6eed32f1f87180843b009aec2e8307a12094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb0ca28a152d0002c7e14af60000008083019ecea0ab07ae99c67aa78e7ba5cf6781e90cc32b00219b1de102513d56548a41e86df514a034cbd19feacd73e8ce64d00c4d199600b9b5243c578fd7f51bfaec288bbaf42a8bf87101843b9aec2e8307a120940100bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e14af6000000800083019ecea0f039985866d8256f10c1be4f7b2cace28d8f20bde27e2604393e00b095b7f77316a05a3e6e81065f2b4604bcec5bd4aba684835996fc3f87938000aac1c09c6eed32f1f87180843b9aec2e8307a12094c0c4c8baea3f6acb49b600e1fb9e2adeceeacb0ca28a152d02c7e14af60000008083019ecea0ab07ae9900c67aa78e7ba5cf6781e90cc32b219b1de102513d56548a41e86df514a034cb00d19feacd73e8ce64d00c4d1996b9b5243c578fd7f51bfaec288bbaf42a8bf8007101843b9aec2e8307a1209401bae6bf68e9a03fb2bc0615b1bf0d69ce941100ed8a152d02c7e14af60000008083019ecea0f039985866d8256f10c1be4f7b002cace28d8f20bde27e2604393eb095b7f77316a05a3e6e81065f2b4604bcec005bd4aba684835996fc3f879380aac1c09c6eed32f1f87180843b9aec2e830700a12094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb0ca28a152d02c7e14af6000000008083019ecea0ab07ae99c67aa78e7ba5cf6781e90cc32b219b1de10200513d56548a41e86df514a034cbd19feacd73e8ce64d00c4d1996b9b5243c57008fd7f51bfaec288bbaf42a8bf87101843b9aec2e8307a1209401bae6bf68e900a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e14af60000008083019ecea000f039985866d8256f10c1be4f7b2cace28d8f20bde27e2604393eb095b7f7730016a05a3e6e81065f2b4604bcec5bd4aba684835996fc3f879380aac1c09c6e00ed32f1f87180843b9aec2e8307a12094c0c4c8baea3f6acb49b6e1fb9e2ade00ceeacb0ca28a152d02c7e14af60000008083019ecea0ab07ae99c67aa78e7b00a5cf6781e90cc32b219b1de102513d56548a41e86df514a034cbd19feacd7300e8ce64d00c4d1996b9b5243c578fd7f51bfaec288bbaf42a8bf87101843b9a00ec2e8307a1209401bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d0200c7e14af60000008083019ecea0f039985866d8256f10c1be4f7b2cace28d8f0020bde27e2604393eb095b7f77316a05a3e6e81065f2b4604bcec5bd4aba68400835996fc3f879380aac1c09c6eed32f1f87180843b9aec2e8307a12094c0c400c8baea3f6acb49b6e1fb9e2adeceeacb0ca28a152d02c7e14af6000000808300019ecea0ab07ae99c67aa78e7ba5cf6781e90cc32b219b1de102513d56548a0041e86df514a034cbd19feacd73e8ce64d00c4d1996b9b5243c578fd7f51bfa00ec288bbaf42a8bf87101843b9aec2e8307a1209401bae6bf68e9a03fb2bc060015b1bf0d69ce9411ed8a152d02c7e14af60000008083019ecea0f03998586600d8256f10c1be4f7b2cace28d8f20bde27e2604393eb095b7f77316a05a3e6e0081065f2b4604bcec5bd4aba684835996fc3f879380aac1c09c6eed32f1f8710080843b9aec2e8307a12094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb0ca2008a152d02c7e14af60000008083019ecea0ab07ae99c67aa78e7ba5cf6781e9000cc32b219b1de102513d56548a41e86df514a034cbd19feacd73e8ce64d00c004d1996b9b5243c578fd7f51bfaec288bbaf42a8bf87101843b9aec2e8307a100209401bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e14af6000000008083019ecea0f039985866d8256f10c1be4f7b2cace28d8f20bde27e260004393eb095b7f77316a05a3e6e81065f2b4604bcec5bd4aba684835996fc3f00879380aac1c09c6eed32f1f87180843b9aec2e8307a12094c0c4c8baea3f6a00cb49b6e1fb9e2adeceeacb0ca28a152d02c7e14af60000008083019ecea0ab0007ae99c67aa78e7ba5cf6781e90cc32b219b1de102513d56548a41e86df51400a034cbd19feacd73e8ce64d00c4d1996b9b5243c578fd7f51bfaec288bbaf4002a8bf87101843b9aec2e8307a1209401bae6bf68e9a03fb2bc0615b1bf0d6900ce9411ed8a152d02c7e14af60000008083019ecea0f039985866d8256f10c100be4f7b2cace28d8f20bde27e2604393eb095b7f77316a05a3e6e81065f2b460004bcec5bd4aba684835996fc3f879380aac1c09c6eed32f1f87180843b9aec002e8307a12094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb0ca28a152d02c700e14af60000008083019ecea0ab07ae99c67aa78e7ba5cf6781e90cc32b219b001de102513d56548a41e86df514a034cbd19feacd73e8ce64d00c4d1996b9b500243c578fd7f51bfaec288bbaf42a8bf87101843b9aec2e8307a1209401bae600bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e14af6000000808301009ecea0f039985866d8256f10c1be4f7b2cace28d8f20bde27e2604393eb09500b7f77316a05a3e6e81065f2b4604bcec5bd4aba684835996fc3f879380aac100c09c6eed32f1f87180843b9aec2e8307a12094c0c4c8baea3f6acb49b6e1fb009e2adeceeacb0ca28a152d02c7e14af60000008083019ecea0ab07ae99c67a00a78e7ba5cf6781e90cc32b219b1de102513d56548a41e86df514a034cbd19f00eacd73e8ce64d00c4d1996b9b5243c578fd7f51bfaec288bbaf42a8bf8710100843b9aec2e8307a1209401bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a00152d02c7e14af60000008083019ecea0f039985866d8256f10c1be4f7b2cac00e28d8f20bde27e2604393eb095b7f77316a05a3e6e81065f2b4604bcec5bd400aba684835996fc3f879380aac1c09c6eed32f1f87180843b9aec2e8307a1200094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb0ca28a152d02c7e14af6000000008083019ecea0ab07ae99c67aa78e7ba5cf6781e90cc32b219b1de102513d0056548a41e86df514a034cbd19feacd73e8ce64d00c4d1996b9b5243c578fd700f51bfaec288bbaf42a8bf87101843b9aec2e8307a1209401bae6bf68e9a03f00b2bc0615b1bf0d69ce9411ed8a152d02c7e14af60000008083019ecea0f03900985866d8256f10c1be4f7b2cace28d8f20bde27e2604393eb095b7f77316a0005a3e6e81065f2b4604bcec5bd4aba684835996fc3f879380aac1c09c6eed3200f1f87180843b9aec2e8307a12094c0c4c8baea3f6acb49b6e1fb9e2adeceea00cb0ca28a152d02c7e14af60000008083019ecea0ab07ae99c67aa78e7ba5cf006781e90cc32b219b1de102513d56548a41e86df514a034cbd19feacd73e8ce0064d00c4d1996b9b5243c578fd7f51bfaec288bbaf42a8bf87101843b9aec2e008307a1209401bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e1004af60000008083019ecea0f039985866d8256f10c1be4f7b2cace28d8f20bd00e27e2604393eb095b7f77316a05a3e6e81065f2b4604bcec5bd4aba68483590096fc3f879380aac1c09c6eed32f1f87180843b9aec2e8307a12094c0c4c8ba00ea3f6acb49b6e1fb9e2adeceeacb0ca28a152d02c7e14af60000008083019e00cea0ab07ae99c67aa78e7ba5cf6781e90cc32b219b1de102513d56548a41e8006df514a034cbd19feacd73e8ce64d00c4d1996b9b5243c578fd7f51bfaec28008bbaf42a8bf87101843b9aec2e8307a1209401bae6bf68e9a03fb2bc0615b100bf0d69ce9411ed8a152d02c7e14af60000008083019ecea0f039985866d825006f10c1be4f7b2cace28d8f20bde27e2604393eb095b7f77316a05a3e6e8106005f2b4604bcec5bd4aba684835996fc3f879380aac1c09c6eed32f1f8718084003b9aec2e8307a12094c0c4c8baea3f6acb49b6e1fb9e2adeceeacb0ca28a15002d02c7e14af60000008083019ecea0ab07ae99c67aa78e7ba5cf6781e90cc3002b219b1de102513d56548a41e86df514a034cbd19feacd73e8ce64d00c4d190096b9b5243c578fd7f51bfaec288bbaf42a8bf87101843b9aec2e8307a120940001bae6bf68e9a03fb2bc0615b1bf0d69ce9411ed8a152d02c7e14af6000000008083019ecea0f039985866d8256f10c1be4f7b2cace28d8f20bde27e260439003eb095b7f77316a05a3e6e81065f2b4604bcec5bd4aba684835996fc3f87930080aac1c09c6eed32f1", encoded)
	assert.Equal(t, "0x01521b20f341588dea5978efb00d7b077a986598a6001fc2e5859d77f3ffc284", batch.BlobVersionedHash.Hex())

	chunk8 := &encoding.Chunk{Blocks: []*encoding.Block{trace2, trace3, trace4}}
	chunk9 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk8, chunk9}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	encoded = strings.TrimRight(hex.EncodeToString(batch.blob[:]), "0")
	assert.Equal(t, "", encoded)
	assert.Equal(t, "0x01e4cdef25aa86f0e2dce3e1f7060b9f5f40103840ad73b5f073b2711a77003b", batch.BlobVersionedHash.Hex())
}

func TestCodecV1BatchChallenge(t *testing.T) {
	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	chunk2 := &encoding.Chunk{Blocks: []*encoding.Block{trace2}}
	originalBatch := &encoding.Batch{Chunks: []*encoding.Chunk{chunk2}}
	batch, err := NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "3eb91733dcffb1951528ab272342ae45ed56e17df0decd4ed9584445d981a922", hex.EncodeToString(batch.z[:]))

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	chunk3 := &encoding.Chunk{Blocks: []*encoding.Block{trace3}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk3}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "6c94bcb5733d39e3eb489317a9791bf470d4d8262b3c0e353dd50673bdeb52dc", hex.EncodeToString(batch.z[:]))

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	chunk4 := &encoding.Chunk{Blocks: []*encoding.Block{trace4}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk4}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "5ebbf1cd775eabcceb7ee7fad9675fc47bc7a96baef0e2d8d3a7311d87cbb8ee", hex.EncodeToString(batch.z[:]))

	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	chunk5 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "099f933910ce3c20091f81c52c61e273aca7a537b27b80da79775ee2477e6b4b", hex.EncodeToString(batch.z[:]))

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	chunk6 := &encoding.Chunk{Blocks: []*encoding.Block{trace6}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk6}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "099f933910ce3c20091f81c52c61e273aca7a537b27b80da79775ee2477e6b4b", hex.EncodeToString(batch.z[:]))

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	chunk7 := &encoding.Chunk{Blocks: []*encoding.Block{trace7}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk7}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "099f933910ce3c20091f81c52c61e273aca7a537b27b80da79775ee2477e6b4b", hex.EncodeToString(batch.z[:]))

	// 15 chunks
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0244c987922db21694e8eb0184c4a5e6f3785fb688224822f1f826874ed5aae2", hex.EncodeToString(batch.z[:]))

	chunk8 := &encoding.Chunk{Blocks: []*encoding.Block{trace2, trace3, trace4}}
	chunk9 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk8, chunk9}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "607f57e9c37918e146fdaae228e7c7cacd7dc2b639ea7eeeed0498f9d07883a1", hex.EncodeToString(batch.z[:]))
}

func TestCodecV1BatchBlobDataProof(t *testing.T) {
	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	chunk2 := &encoding.Chunk{Blocks: []*encoding.Block{trace2}}
	originalBatch := &encoding.Batch{Chunks: []*encoding.Chunk{chunk2}}
	batch, err := NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err := batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "3eb91733dcffb1951528ab272342ae45ed56e17df0decd4ed9584445d981a9226682c8157fdabdcefe9b94cfe0e19115d7a3199568e8fde056f83cc5ac833292b44a38af1f9a6c70cd3ccfbf71968f447aa566bbafb0bbc566fc9eeb42973484802635a1bbd8305d34a46693331bf607b19858df6e24e9e1eb02167752c8038651e838f4096713790ab504bedfd659de369dec673a72d17e10d363106f0b8cd2", hex.EncodeToString(verifyData))

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	chunk3 := &encoding.Chunk{Blocks: []*encoding.Block{trace3}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk3}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err = batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "6c94bcb5733d39e3eb489317a9791bf470d4d8262b3c0e353dd50673bdeb52dc1927aad93e5397e4b9e02396c6a29f215ee86d3d869aef5227e77a2e005c65edb8aab265dc352e352807a298f7bb99d432c7cd543e63158cbdb8fbf99f3182a71af35ccbed2693c5e0bc5be38d565e8687154d0290645c7ebbead90bec57bb16c57a2009293db6ebac96b26bfb4d6d9d608713ea4b12d5e83dfe86e57e9dd727", hex.EncodeToString(verifyData))

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	chunk4 := &encoding.Chunk{Blocks: []*encoding.Block{trace4}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk4}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err = batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "5ebbf1cd775eabcceb7ee7fad9675fc47bc7a96baef0e2d8d3a7311d87cbb8ee16a968ea8309463e01f426ee1cfa07d38fc4db7039f8bc959170a4bc69733799afd4e1c55a17dbdf8390b5736158afe238d82f8b696669ba47015fcdfd4d1becd0ff7a47f8f379a4ac8d1741e2d67624a652915aee98dab659331a41d84aace68be512d1b8c92504c9aac6b84e0be6b7555bd148d47f69b9e3cee14483474d02", hex.EncodeToString(verifyData))

	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	chunk5 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err = batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "099f933910ce3c20091f81c52c61e273aca7a537b27b80da79775ee2477e6b4b0000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(verifyData))

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	chunk6 := &encoding.Chunk{Blocks: []*encoding.Block{trace6}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk6}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err = batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "099f933910ce3c20091f81c52c61e273aca7a537b27b80da79775ee2477e6b4b0000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(verifyData))

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	chunk7 := &encoding.Chunk{Blocks: []*encoding.Block{trace7}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk7}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err = batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "099f933910ce3c20091f81c52c61e273aca7a537b27b80da79775ee2477e6b4b0000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(verifyData))

	// 15 chunks
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2, chunk2}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err = batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "0244c987922db21694e8eb0184c4a5e6f3785fb688224822f1f826874ed5aae2613ca15d051a539e3b239027f9bdbd03bd3c66c98afafb674e2a7441912cbe099743324c70e20042de6480f115b215fbba3472a8b994303a99576c1244aa4aec22fdfe6c74ec728aa28a9eb3812bc93291fbc65cfa558e4df12bcde442483d31072000c56f94fe012285bc5832eaee5fe1d47f1e8655539c4500f66207d8edc6", hex.EncodeToString(verifyData))

	chunk8 := &encoding.Chunk{Blocks: []*encoding.Block{trace2, trace3, trace4}}
	chunk9 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk8, chunk9}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	verifyData, err = batch.BlobDataProof()
	assert.NoError(t, err)
	assert.Equal(t, "607f57e9c37918e146fdaae228e7c7cacd7dc2b639ea7eeeed0498f9d07883a145a4cd42f620d6c437b327d4656061ac0c838fd9db81e6f45b451ac798668e90adbb1944e9a0b2a67e279af454e99d70b7d141347ea0f33e243a1000c1398465cba27f0fccf7a0f72b21289b05b94099a6333a0421b9fa1a1b374f809d48e9b62eb4140a223ce6b029f61fffc0af8bf680c6ef62b0ee0798dc1cef27d758319e", hex.EncodeToString(verifyData))
}

func TestCodecV1BatchSkipBitmap(t *testing.T) {
	trace2 := readBlockFromJSON(t, "../../../testdata/blockTrace_02.json")
	chunk2 := &encoding.Chunk{Blocks: []*encoding.Block{trace2}}
	originalBatch := &encoding.Batch{Chunks: []*encoding.Chunk{chunk2}}
	batch, err := NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 0, int(batch.L1MessagePopped))
	assert.Equal(t, 0, int(batch.TotalL1MessagePopped))

	trace3 := readBlockFromJSON(t, "../../../testdata/blockTrace_03.json")
	chunk3 := &encoding.Chunk{Blocks: []*encoding.Block{trace3}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk3}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 0, int(batch.L1MessagePopped))
	assert.Equal(t, 0, int(batch.TotalL1MessagePopped))

	trace4 := readBlockFromJSON(t, "../../../testdata/blockTrace_04.json")
	chunk4 := &encoding.Chunk{Blocks: []*encoding.Block{trace4}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk4}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "00000000000000000000000000000000000000000000000000000000000003ff", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 11, int(batch.L1MessagePopped)) // skip 10, include 1
	assert.Equal(t, 11, int(batch.TotalL1MessagePopped))

	trace5 := readBlockFromJSON(t, "../../../testdata/blockTrace_05.json")
	chunk5 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk5}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0000000000000000000000000000000000000000000000000000001fffffffff", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 42, int(batch.L1MessagePopped)) // skip 37, include 5
	assert.Equal(t, 42, int(batch.TotalL1MessagePopped))

	originalBatch.TotalL1MessagePoppedBefore = 37
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 5, int(batch.L1MessagePopped)) // skip 37, include 5
	assert.Equal(t, 42, int(batch.TotalL1MessagePopped))

	trace6 := readBlockFromJSON(t, "../../../testdata/blockTrace_06.json")
	chunk6 := &encoding.Chunk{Blocks: []*encoding.Block{trace6}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk6}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "00000000000000000000000000000000000000000000000000000000000001dd", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 10, int(batch.L1MessagePopped)) // skip 7, include 3
	assert.Equal(t, 10, int(batch.TotalL1MessagePopped))

	trace7 := readBlockFromJSON(t, "../../../testdata/blockTrace_07.json")
	chunk7 := &encoding.Chunk{Blocks: []*encoding.Block{trace7}}
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk7}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0000000000000000000000000000000000000000000000000000000000000000", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 257, int(batch.L1MessagePopped)) // skip 255, include 2
	assert.Equal(t, 257, int(batch.TotalL1MessagePopped))

	originalBatch.TotalL1MessagePoppedBefore = 1
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 256, int(batch.L1MessagePopped)) // skip 254, include 2
	assert.Equal(t, 257, int(batch.TotalL1MessagePopped))

	chunk8 := &encoding.Chunk{Blocks: []*encoding.Block{trace2, trace3, trace4}} // queue index 10
	chunk9 := &encoding.Chunk{Blocks: []*encoding.Block{trace5}}                 // queue index 37-41
	originalBatch = &encoding.Batch{Chunks: []*encoding.Chunk{chunk8, chunk9}}
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0000000000000000000000000000000000000000000000000000001ffffffbff", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 42, int(batch.L1MessagePopped))
	assert.Equal(t, 42, int(batch.TotalL1MessagePopped))

	originalBatch.TotalL1MessagePoppedBefore = 10
	batch, err = NewDABatch(originalBatch)
	assert.NoError(t, err)
	assert.Equal(t, "0000000000000000000000000000000000000000000000000000000007fffffe", hex.EncodeToString(batch.SkippedL1MessageBitmap))
	assert.Equal(t, 32, int(batch.L1MessagePopped))
	assert.Equal(t, 42, int(batch.TotalL1MessagePopped))
}

func readBlockFromJSON(t *testing.T, filename string) *encoding.Block {
	data, err := os.ReadFile(filename)
	assert.NoError(t, err)

	block := &encoding.Block{}
	assert.NoError(t, json.Unmarshal(data, block))
	return block
}
